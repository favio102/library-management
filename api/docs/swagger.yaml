basePath: /
definitions:
  models.Book:
    description: A book in the library
    properties:
      author:
        description: Author of the book
        type: string
      description:
        description: Description of the book
        type: string
      edition:
        description: Edition of the book
        type: string
      format:
        description: Format of the book (e.g., hardcover, paperback)
        type: string
      id:
        description: Unique identifier for the book
        type: string
      language:
        description: Language of the book
        type: string
      publisher:
        description: Publisher of the book
        type: string
      subject:
        description: Subject of the book
        type: string
      title:
        description: Title of the book
        type: string
      year:
        description: Publication year
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for a library management system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Library Management API
  version: "1.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book with a unique ID
      parameters:
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book deleted
          schema:
            type: string
      summary: Delete a book by ID
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Retrieve a single book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update an existing book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: Update an existing book by ID
      tags:
      - books
swagger: "2.0"
